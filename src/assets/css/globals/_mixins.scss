/**
 * Hide visually
 *
 * See http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 * for discussion of different solutions
 */
// stylelint-disable
@mixin visuallyhidden() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px !important;
  overflow: hidden;
  padding: 0 !important;
  position: absolute;
  width: 1px;

  @at-root br#{&} {
    content: '';
    display: none;
  }
}

// stylelint-enable

/**
 *
 */
@mixin visuallyhiddenReset() {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

/**
 *
 */
@mixin visuallyhiddenFocusable() {
  @include visuallyhidden;

  &:focus,
  &:active {
    @include visuallyhiddenReset;
  }
}

/**
 * Contain floats with clearfix
 *
 * http://nicolasgallagher.com/micro-clearfix-hack/
 */
@mixin clearfix() {
  *zoom: 1;

  &:before,
  &:after {
    content: ' ';
    display: table;
  }

  &:after {
    clear: both;
  }
}


/**
 * Lists with layout purpose
 */

@mixin resetList() {
  list-style: none;
  margin: 0;
  padding: 0;
}


/**
 * Replace text
 */

@mixin replaceText() {
  display: block;
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}


/**
 * Better font rendering (on OS X)
 * http://maximilianhoffmann.com/posts/better-font-rendering-on-osx
 *
 * Usage:
 *
 * .xy--dark-on-light {
 * 	@include fontSmoothing;
 * }
 * .xy--light-on-dark {
 * 	@include fontSmoothingReset;
 * }
 */

@mixin fontSmoothing() {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/**
 *
 */
@mixin fontSmoothingReset() {
  -webkit-font-smoothing: subpixel-antialiased;
  -moz-osx-font-smoothing: auto;
}


/**
 * Placeholder in input fields
 */
@mixin placeholder() {
  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder { // Firefox 18-
    @content;
  }

  &::-moz-placeholder { // Firefox 19+
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

/**
 * Generate linear interpolated size values through multiple break points
 * https://www.smashingmagazine.com/2017/05/fluid-responsive-typography-css-poly-fluid-sizing/
 *
 * @param $property - A string CSS property name
 * @param $map - A SASS map of viewport unit and size value pairs
 * @requires function linearInterpolation
 * @example
 *   @include polyFluidSizing('font-size', (small: 22px, medium: 24px, large: 34px));
 * @author Jake Wilson <jake.e.wilson@gmail.com>
 */
@mixin polyFluidSizing($property, $map, $margin: 0) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error 'polyFluidSizing() $map requires at least 2 values';
  }

  $keys: map-keys($map);

  // Minimum size
  #{$property}: map-get($map, nth($keys, 1));

  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    $breakpointValue: map-get($mqBreakpoints, nth($keys, $i));
    $sizeValue: map-get($map, nth($keys, $i));
    $nextBreakpointValue: map-get($mqBreakpoints, nth($keys, $i+1));
    $nextSizeValue: map-get($map, nth($keys, ($i+1)));

    @media ( min-width: $breakpointValue ) {
      #{$property}: linearInterpolation(($breakpointValue: $sizeValue, $nextBreakpointValue: $nextSizeValue), $margin); //stylelint-disable-line
    }
  }

  // Maxmimum size
  @media (min-width: map-get($mqBreakpoints, nth($keys, $length))) { //stylelint-disable-line
    @if ($margin > 0) {
      #{$property}: calc(#{map-get($map, nth($keys, $length))} + #{$margin}px);
    } @else {
      #{$property}: map-get($map, nth($keys, $length));
    }
  }
}

/**
 * Calculate the definition of a line between two points
 *
 * @param $map - A SASS map of viewport widths and size value pairs
 * @returns A linear equation as a calc() function
 * @example
 *   font-size: linearInterpolation((tiny: 18px, medium: 26px));
 * @author Jake Wilson <jake.e.wilson@gmail.com>
 */
@function linearInterpolation($map, $margin: 0) {
  $keys: map-keys($map);

  @if (length($keys) != 2) {
    @error 'linear-interpolation() $map must be exactly 2 values';
  }
  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys, 1));

  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

  // Determine if the sign should be positive or negative
  $sign: '+';

  @if ($b < 0) {
    $sign: '-';
    $altSign: '+';
    $b: abs($b);
  }
  @if ($margin > 0) {
    @return calc(#{$m*100}vw #{$sign} #{$b} + #{$margin}px); //stylelint-disable-line
  } @else {
    @return calc(#{$m*100}vw #{$sign} #{$b}); //stylelint-disable-line
  }
}

/**
 * Get Value For Breakpoint or next smalles which is in target map available
 *
 * @param $targetMap - A Sass Map which is the target
 * @param $breakpoint - The whanted breakpoint
 * @returns A value in rem
 * @author Marcel BÃ¼hrig <marcel.buehrig@zeix.com>
 */
@function getValueForBreakpoint($targetMap, $breakpoint) {
  @if map-has-key($targetMap, $breakpoint) {
    @return map-get($targetMap, $breakpoint);
  } @else {
    $breakpointIndex: index(map-keys($mqBreakpoints), $breakpoint);

    @if $breakpointIndex {
      $breakpointIndex: $breakpointIndex - 1;

      @while $breakpointIndex >= 0 {
        $searchableBreakpoint: nth(map-keys($mqBreakpoints), $breakpointIndex);

        @if map-has-key($targetMap, $searchableBreakpoint) {
          @return map-get($targetMap, $searchableBreakpoint);
        }

        $breakpointIndex: $breakpointIndex - 1;
      }

      @error 'Something went horribly wrong, it seems your targetMap doesn\'t have real breakpoints, please consider $mqBreakpoints for the breakpoint names';
    } @else {
      @error 'The given breakpoint `#{$breakpoint}` hasn\'t been found in $mqBreakpoints';
    }
  }
}

/**
 * Generate CSS by giving a list or string and a value
 *
 * @param $listOrString - Either a list or a astring
 * @param $value - String, can be whatever value you like
 */
@mixin generateCSSFromListOrString($listOrString, $value, $isNegative: false) {
  @if (type-of($listOrString) == list) {
    @for $i from 1 through length($listOrString) {
      @if $isNegative {
        #{nth($listOrString, $i)}: -$value;
      } @else {
        #{nth($listOrString, $i)}: $value;
      }
    }
  } @else if (type-of($listOrString) == string) {
    @if $isNegative {
      #{$listOrString}: -$value;
    } @else {
      #{$listOrString}: $value;
    }
  } @else {
    @error 'The targeted variable is neither a list nor a string. BAD';
  }
}

/**
 * Gets the according values from the sizeCurves and maps it to the wanted attributes
 *
 * @param $attributes - A list or a string of attributes (if string, there is only one)
 * @param $curve - The key value of the curve, e.g. regular
 * @param $map- The Map with all the wanted size curves inside - default: $sizeCurves
 */
@mixin sizeCurve($attributes, $curve, $map: $sizeCurves, $isNegative: false, $pxToRem: true) {
  @if (map-has-key($map, $curve)) {
    $selectedCurve: map-get($map, $curve);

    @each $breakpoint, $size in $selectedCurve {
      @if $breakpoint == tiny {
        @if $pxToRem {
          @include generateCSSFromListOrString($attributes, pxToRem(map-get($selectedCurve, tiny)), $isNegative);
        } @else {
          @include generateCSSFromListOrString($attributes, map-get($selectedCurve, tiny), $isNegative);
        }
      } @else {
        @include mq($from: $breakpoint) {
          @if $pxToRem {
            @include generateCSSFromListOrString($attributes, pxToRem(map-get($selectedCurve, $breakpoint)), $isNegative);
          } @else {
            @include generateCSSFromListOrString($attributes, map-get($selectedCurve, $breakpoint), $isNegative);
          }
        }
      }
    }
  } @else {
    @error 'The curve `#{$curve}` doesn\'t exist in the provided $map';
  }
}

/**
 * Grid offset for content elements
 */
@mixin gridNestedOffset($attributes, $offsetColumnCount, $columnsWidthCount, $isNegative: false, $trailingGutter: true) {
  @include mq($from: tiny, $to: xsmall) {
    $columnsOffset: (100% / 6) * $offsetColumnCount;
    $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, tiny)) / map-get($columnsWidthCount, tiny)) * $offsetColumnCount;
    @if ($trailingGutter == false) {
      $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, tiny)) / map-get($columnsWidthCount, tiny)) * $offsetColumnCount - pxToRem(map-get($grid-margin-gutters, tiny));
    }
    @if $isNegative == true {
      @include generateCSSFromListOrString($attributes, calc(-#{$columnsOffset} - #{$gutterCorrection}));
    } @else {
      @include generateCSSFromListOrString($attributes, calc(#{$columnsOffset} + #{$gutterCorrection}));
    }
  }
  @include mq($from: xsmall, $to: small) {
    $columnsOffset: (100% / 6) * $offsetColumnCount;
    $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, xsmall)) / map-get($columnsWidthCount, tiny)) * $offsetColumnCount;
    @if ($trailingGutter == false) {
      $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, xsmall)) / map-get($columnsWidthCount, tiny)) * $offsetColumnCount - pxToRem(map-get($grid-margin-gutters, xsmall));
    }
    @if $isNegative == true {
      @include generateCSSFromListOrString($attributes, calc(-#{$columnsOffset} - #{$gutterCorrection}));
    } @else {
      @include generateCSSFromListOrString($attributes, calc(#{$columnsOffset} + #{$gutterCorrection}));
    }
  }
  @include mq($from: small, $to: medium) {
    $columnsOffset: (100% / 10) * $offsetColumnCount;
    $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, xsmall)) / map-get($columnsWidthCount, small)) * $offsetColumnCount;
    @if ($trailingGutter == false) {
      $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, xsmall)) / map-get($columnsWidthCount, small)) * $offsetColumnCount - pxToRem(map-get($grid-margin-gutters, xsmall));
    }
    @if $isNegative == true {
      @include generateCSSFromListOrString($attributes, calc(-#{$columnsOffset} - #{$gutterCorrection}));
    } @else {
      @include generateCSSFromListOrString($attributes, calc(#{$columnsOffset} + #{$gutterCorrection}));
    }
  }
  @include mq($from: medium, $to: large) {
    $columnsOffset: (100% / 9) * $offsetColumnCount;
    $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, medium)) / map-get($columnsWidthCount, medium)) * $offsetColumnCount;
    @if ($trailingGutter == false) {
      $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, medium)) / map-get($columnsWidthCount, medium)) * $offsetColumnCount - pxToRem(map-get($grid-margin-gutters, medium));
    }
    @if $isNegative == true {
      @include generateCSSFromListOrString($attributes, calc(-#{$columnsOffset} - #{$gutterCorrection}));
    } @else {
      @include generateCSSFromListOrString($attributes, calc(#{$columnsOffset} + #{$gutterCorrection}));
    }
  }
  @include mq($from: large, $to: xlarge) {
    $columnsOffset: (100% / 8) * $offsetColumnCount;
    $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, medium)) / map-get($columnsWidthCount, medium)) * $offsetColumnCount;
    @if ($trailingGutter == false) {
      $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, medium)) / map-get($columnsWidthCount, medium)) * $offsetColumnCount - pxToRem(map-get($grid-margin-gutters, medium));
    }
    @if $isNegative == true {
      @include generateCSSFromListOrString($attributes, calc(-#{$columnsOffset} - #{$gutterCorrection}));
    } @else {
      @include generateCSSFromListOrString($attributes, calc(#{$columnsOffset} + #{$gutterCorrection}));
    }
  }
  @include mq($from: xlarge) {
    $columnsOffset: (100% / 8) * $offsetColumnCount;
    $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, xlarge)) / map-get($columnsWidthCount, large)) * $offsetColumnCount;
    @if ($trailingGutter == false) {
      $gutterCorrection: (pxToRem(map-get($grid-margin-gutters, xlarge)) / map-get($columnsWidthCount, large)) * $offsetColumnCount - pxToRem(map-get($grid-margin-gutters, xlarge));
    }
    @if $isNegative == true {
      @include generateCSSFromListOrString($attributes, calc(-#{$columnsOffset} - #{$gutterCorrection}));
    } @else {
      @include generateCSSFromListOrString($attributes, calc(#{$columnsOffset} + #{$gutterCorrection}));
    }
  }
}

/**
 * Grid bleeding for content elements
 */
@mixin gridBleed($trailingGutters: false, $fullwidth: false, $isContentWidth: false) {

  @if $trailingGutters == true {
    @if ($isContentWidth == false) {
      @include sizeCurve(padding-left padding-right, bleed, $grid-outer-gutters);
    } @else {
      @include sizeCurve(padding-left padding-right, bleed, $grid-outer-gutters);
    }

    width: calc(100vw);
    @if $fullwidth == false {
      max-width: $sizeGlobalMaxWidth;
    }
    @if $isContentWidth == true {
      max-width: $sizeWidthContent;
    }
  } @else {
    width: calc(100vw + 2px);

    @if $fullwidth == false {
      max-width: $sizeGlobalMaxWidth;
    }
    @if $isContentWidth == true {
      max-width: $sizeWidthContent;
    }
  }
  width: calc(100vw - var(--scrollbar-wd)); //stylelint-disable-line
  transform: translateX(-50%);
  margin-left: 50%;
  z-index: -1;

  @include mq($from: small, $to: medium) {
    $translateLeft: -50% - (2/12/2) * 100;
    $additionalRem: pxToRem(map-get($grid-margin-gutters, tiny)) * 1.5/6;

    transform: translateX(#{$translateLeft}) translateX(#{$additionalRem});
  }
  @include mq($from: medium, $to: large) {
    $translateLeft: -50% - (1/12/2) * 100;
    $additionalRem: pxToRem(map-get($grid-margin-gutters, medium))/12 - 0.01;

    transform: translateX(#{$translateLeft}) translateX(#{$additionalRem});
  }

  @media print {
    transform: none;
    max-width: 100%;
    margin-left: 0;
  }
}

/**
 * Corrected content with for headings
 */
@mixin headingFullWidth() {
  @include mq($from: medium, $to: large) {
    margin-right: calc(-11.1% - 0.08em);
  }
  @include mq($from: large) {
    margin-right: calc(-25% - 0.15em);
  }
}


/**
 * Resets the button no styling
 */
@mixin blankButton() {
  color: $colorBlack;
  border: none;
  background: none;
  padding: 0;
  -webkit-appearance: none; //stylelint-disable-line
  line-height: 1.5;

  text-align: left;
  cursor: pointer;

  &:focus {
    outline: none;
  }
}

/**
 * SVG Icons
 */
@function svg-tickmark($color) {
  $encodedSvg: encode_Base64('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 24 18" style="enable-background:new 0 0 24 18" xml:space="preserve"><path d="M17.25 6.75L9.375 14.25L6 10.875L4.5 12.375L9.375 17.25L18.75 8.25L17.25 6.75Z" fill="' + rgba($color, 0.99) + '" /></svg>'); // stylelint-disable-line

  @return 'data:image/svg+xml;base64,#{$encodedSvg}';
}
@function svg-mapmarker($color) {
  $encodedSvg: encode_Base64('<svg width="32" height="38" viewBox="0 0 30 38" xmlns="http://www.w3.org/2000/svg"><circle cx="15" cy="15" r="5.625" fill="white"/><path d="M25.6051 4.96472C22.7699 2.1978 18.9616 0.654846 15.0001 0.668053C11.0386 0.654846 7.23025 2.1978 4.39509 4.96472C3.00568 6.31104 1.90074 7.92263 1.14579 9.70395C0.390834 11.4853 0.00123501 13.4 9.1192e-05 15.3347C-0.0138092 19.4276 1.5619 23.366 4.39509 26.3197L15.0001 37.3347L25.6051 26.3197C28.4383 23.366 30.014 19.4276 30.0001 15.3347C29.9989 13.4 29.6094 11.4853 28.8544 9.70395C28.0994 7.92263 26.9945 6.31104 25.6051 4.96472ZM15.0001 20.6681C12.2318 20.6681 10.0001 18.4347 10.0001 15.6664C9.99921 15.0096 10.128 14.3591 10.3789 13.7522C10.6299 13.1453 10.9982 12.5938 11.4627 12.1295C11.9272 11.6651 12.4787 11.297 13.0858 11.0463C13.6928 10.7955 14.3433 10.667 15.0001 10.6681C17.7684 10.6681 20.0001 12.9014 20.0001 15.6664C20.0012 16.3234 19.8726 16.9741 19.6218 17.5814C19.3709 18.1886 19.0027 18.7403 18.5382 19.205C18.0737 19.6696 17.5221 20.038 16.9149 20.2891C16.3078 20.5401 15.6571 20.6689 15.0001 20.6681Z" fill="' + rgba($color, 0.99) + '"/></svg>'); // stylelint-disable-line

  @return 'data:image/svg+xml;base64,#{$encodedSvg}';
}
@function svg-checkmark($color) {
  $encodedSvg: encode_Base64('<svg width="24" height="24" viewBox="0 0 24 24" fill="' + rgba($color, 0.99) + '" xmlns="http://www.w3.org/2000/svg"><path d="M20.25 5.75L12.375 13.25L9 9.875L7.5 11.375L12.375 16.25L21.75 7.25L20.25 5.75Z"/><path fill-rule="evenodd" clip-rule="evenodd" d="M2.375 2.375H16.5V4.625H4.625V19.375H19.375V14H21.625V21.625H2.375V2.375Z"/></svg>'); // stylelint-disable-line

  @return 'data:image/svg+xml;base64,#{$encodedSvg}';
}

/**
 * Transition Creator Mixin, default is set to create the default hover transition
 *
 */
@mixin transition($propertyList, $time: $transitionTimeSimple, $easing: $transitionEasingDefault) {
  @if (type-of($propertyList) == list) {
    $propertyString: '';

    @for $i from 1 through length($propertyList) {
      $propertyString: $propertyString + nth($propertyList, $i) + ' ' + $time + ' ' + $easing + ', ';
    }

    transition: unquote(str-slice($propertyString, 1, -3));
  } @else {
    transition: $propertyList $time $easing;
  }
}

@function multiplyMapValues($map, $factor) {
  $newMap: ();

  @each $breakpoint, $value in $map {
    $newMap: map-merge($newMap, ($breakpoint: $value * $factor));
  }

  @return $newMap;
}

@mixin resetList() {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

/**
 * A Special Mixin to disable hover effects on mobile
 */
@mixin hover($additionalNot: false) {
  @media not all and (hover: none) { // stylelint-disable-line
    @if $additionalNot {
      &:hover:not(#{$additionalNot}) {
        @content;
      }
    } @else {
      &:hover {
        @content;
      }
    }
  }
}

/**
 * The button with only text and "possibly" an icon, changes from dark grey to black
 */
@mixin textButton() {
  color: $colorBlack60;

  @include transition(color);

  use {
    fill: $colorBlack60;

    @include transition(fill);
  }

  &:hover {
    color: $colorBlack;

    use {
      fill: $colorBlack;
    }
  }
}
/**
 * The mixin which the simple scrollbar styles
 */
@mixin simpleScrollbarStyles() {
  /**
   Simple scrollbar specific classes that cannot be changed and are only used within the select component
   */
  .ss-wrapper {
    overflow: hidden;
    width: 100%;
    height: 100%;
    position: relative;
    z-index: 1;
    float: left;
  }

  .ss-content {
    height: 100%;
    width: calc(100% + 18px);
    padding: 0;
    position: relative;
    overflow-x: auto;
    overflow-y: scroll;
    box-sizing: border-box;
  }

  .ss-content.rtl {
    width: calc(100% + 18px);
    right: auto;
  }

  .ss-scroll {
    position: relative;
    background: rgba(0, 0, 0, 0.3);
    width: 8px;
    border-radius: 4px;
    top: 0;
    z-index: 2;
    transform: translateX(-2px);
    cursor: pointer;
  }

  .ss-grabbed {
    user-select: none;
  }
}
