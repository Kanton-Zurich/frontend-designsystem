$contactMapHeightSmall: 395px;
$contactMapHeightMedium: 302px;
$contactMapHeightLarge: 500px;
$contactMapHeightCurve: (
  default: (
    tiny: $contactMapHeightSmall,
    small: $contactMapHeightMedium,
    medium: $contactMapHeightMedium,
    large: $contactMapHeightMedium,
    xlarge: $contactMapHeightLarge,
  ),
  makespace: (
    tiny: $contactMapHeightSmall - $sizeHuge + $sizeSmallRegular,
    small: $contactMapHeightMedium - $sizeHuge + $sizeBig,
    medium: $contactMapHeightMedium - $sizeHuge + $sizeBig,
    large: $contactMapHeightMedium - $sizeHuge + $sizeBig,
    xlarge: $contactMapHeightLarge,
  ),
  leadBottomSpace: (
    tiny: $sizeBig,
    medium: $sizeLarge,
    xlarge: $sizeBig,
  ),
);

.mdl-contact {
  background-color: $colorViolet;
  color: $colorWhite;
  padding: pxToRem($sizeLarge) pxToRem($sizeSmallRegular);

  @include sizeCurve(margin-bottom, big);

  &--fullwidth {
    @include gridBleed($fullwidth: true);

    padding: $sizeHuge 0;
    margin-bottom: 0;
  }

  &--with-map {
    @include sizeCurve(margin-bottom, makespace, $contactMapHeightCurve);
  }

  .atm-heading--bordered {
    @include polyFluidSizing('font-size', map-get($fontSizeCurves, big));
    line-height: $sizeLineHeightMedium;
    margin-bottom: pxToRem($sizeLarge);

    &:before {
      background: $colorWhite;
    }
  }

  h2.atm-heading--bordered {
    margin-top: 0;
  }

  &__subtitle {
    @include polyFluidSizing('font-size', map-get($fontSizeCurves, medium));
    line-height: $sizeLineHeightMedium;
    font-family: $fontFamilyBlack;
    margin-bottom: $sizeRegular;
    margin-top: 0;

    a {
      margin-bottom: pxToRem($sizeTiny);
    }
  }

  &__lead {
    @include sizeCurve(margin-bottom, leadBottomSpace, $contactMapHeightCurve);
    margin-top: - pxToRem($sizeRegular);

    a {
      margin-top: pxToRem($sizeTiny);
    }
  }

  &__subtitle a,
  &__lead a {
    display: inline-block;
    position: relative;
    color: inherit;
    font-size: $sizeFontRegular;
    font-family: $fontFamilyBase;
    line-height: $sizeLineHeightBase;
    padding-right: pxToRem(27px); //stylelint-disable-line
    text-decoration: none;

    svg {
      position: absolute;
      top: 50%;
      right: 0;
      transform: translateY(-50%);

      use {
        fill: $colorWhite;
      }
    }
  }

  &__section {
    display: flex;
    flex-flow: row wrap;
  }

  &__section-cell {
    position: relative;
    width: 100%;

    & + .mdl-contact__section-cell {
      margin-top: pxToRem($sizeRegular);
    }
  }

  &__section-cell--media {
    margin-top: calc(#{$sizeBiggerBig} + #{$sizeLarge});
    height: 38px;

    .mdl-contact__media-trigger {
      span:last-of-type {
        display: none;
      }

      svg {
        transition: transform 200ms ease-out 100ms;
        transform: translateY(-50%) scale(0.6563) rotate(0deg);
      }
    }

    .mdl-contact__cell-content {
      transition: transform 200ms ease-out 100ms;
      transform: scaleY(0);
      visibility: hidden;
    }

    .mdl-contact__text {
      margin-top: pxToRem($sizeSmallRegular);

      a:not(.atm-button) {
        text-decoration: none;
        border-bottom: 1px solid $colorWhite;
      }

      .atm-button {
        margin-top: pxToRem($sizeLarge);
      }
    }

    &.open {
      height: auto;

      .mdl-contact__media-trigger {
        span:first-of-type {
          display: none;
        }

        span:last-of-type {
          display: inline;
        }

        svg {
          transform: translateY(-50%) scale(0.6563) rotate(45deg);
        }
      }

      .mdl-contact__cell-content {
        transform: scaleY(1);
        visibility: visible;
      }
    }
  }


  &__cell-icon {
    display: inline-flex;
    width: pxToRem($sizeBig);
    height: pxToRem($sizeBig);
    border-radius: 50%;
    background-color: $colorWhite;
    position: absolute;
    top: 0;
    left: 0;

    svg {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.8);
    }
  }

  &__cell-content {
    hyphens: auto;
    padding-left: calc(#{$sizeSmallRegular} + #{$sizeBiggerBig});

    > *:last-of-type {
      margin-bottom: 0;
    }
  }

  &__address {
    font-style: normal;
  }

  &__text {
    @include polyFluidSizing('font-size', map-get($fontSizeCurves, small));
    margin-top: pxToRem($sizeMini);
    hyphens: auto;

    ul {
      @include resetList();
    }

    p,
    a,
    h4,
    ul,
    li {
      font-size: inherit;
      line-height: $sizeLineHeightBigger;
      margin: 0;
    }

    p,
    ul {
      margin-bottom: pxToRem($sizeTiny);
    }

    a {
      color: $colorWhite;
    }
  }

  &__address,
  &__show-route,
  &__phone,
  &__mail {
    @include polyFluidSizing('font-size', map-get($fontSizeCurves, regular));
    font-family: $fontFamilyBlack;
    line-height: $sizeLineHeightBase;
  }

  &:not(.mdl-contact--location) {
    .mdl-contact {
      &__show-route {
        display: inline-block;
        margin-top: calc((#{$sizeFontRegular} * #{$sizeLineHeightBase}) / 2);
        color: inherit;
        text-decoration: none;
        border-bottom: 1px solid $colorWhite;
      }

      &__mail {
        margin: 0;
        display: inline-block;
        color: inherit;
        text-decoration: none;
        border-bottom: 1px solid $colorWhite;
      }
    }
  }

  &__phone:not(:first-of-type) {
    margin-top: pxToRem($sizeTiny);
  }

  &__phone {
    margin: 0;
    display: inline-block;
    color: inherit;
    text-decoration: none;
    border-bottom: 1px solid $colorWhite;
  }

  &__mail {
    margin-bottom: pxToRem($sizeTiny);
  }

  &--location {
    background-color: $colorWhite;
    color: $colorText;
    padding: pxToRem($sizeLarge) 0 0 0;

    .mdl-contact {
      &__address,
      &__show-route,
      &__phone,
      &__mail {
        font-size: pxToRem($sizeFontRegular);
      }

      &__text {
        font-size: pxToRem($sizeFontSmall);
        color: $colorBlack60;
      }

      &__subtitle {
        margin-left: auto;
        margin-right: auto;
        font-size: pxToRem($sizeFontLarge);

        a {
          color: $colorBlack60;
          padding-left: 0;
          margin-top: pxToRem($sizeTiny);

          svg {
            right: auto;

            use {
              fill: $colorBlack60;
            }
          }
        }
      }

      &__section {
        margin: 0;
      }

      &__cell {
        &-content {
          word-break: break-word;
          padding-bottom: $sizeRegular;
        }

        &-icon {
          background-color: $colorBlack5;
          width: pxToRem($sizeBig);
          height: pxToRem($sizeBig);

          svg {
            width: pxToRem($sizeSmallLarge);
            height: pxToRem($sizeSmallLarge);

            use {
              fill: $colorText;
            }
          }
        }
      }
    }

    .atm-text_link {
      color: $colorBlack60;
      margin-bottom: $sizeTiny;

      &:hover {
        color: $colorText;
      }
    }
  }

  &__map_container {
    @include sizeCurve(height , default, $contactMapHeightCurve);
    @include sizeCurve(margin-bottom , default, $contactMapHeightCurve, true);
    margin-top: pxToRem($sizeBiggerBig);
    background: $colorBlack15;
  }

  /*
  * Media Queries SMALL
  */
  @include mq($from: small) {
    &:not(.mdl-contact--location):not(.mdl-contact--fullwidth):not(.mdl-contact--with-map) {
      padding: pxToRem($sizeLarge) 0;
    }

    &--fullwidth {
      padding: pxToRem($sizeHuge) 0;

      .mdl-contact__subtitle {
        margin-bottom: 0;
      }

      .mdl-contact__cell:last-of-type {
        padding-top: pxToRem($sizeSmallRegular);
      }

      .mdl-contact__cell-icon {
        margin-top: pxToRem($sizeRegular);
        position: relative;
        top: auto;
        left: auto;
      }

      .mdl-contact__cell-content {
        margin-top: pxToRem($sizeTiny);
        padding-left: 0;
      }
    }

    .mdl-contact__section-cell:not(.mdl-contact__section-cell--media) {
      margin-top: 0;
    }

    &:not(.mdl-contact--fullwidth):not(.mdl-contact--location) {
      > * {
        @include gridNestedOffset('margin-left', 1, $gridOffsetColumns);
        @include gridNestedOffset('margin-right', 1, $gridOffsetColumns);
      }
    }

    &__lead {
      margin-top: 0;

      a {
        margin-top: 0;
      }
    }

    .atm-heading {
      line-height: $sizeLineHeightNarrow;
    }

    &__address,
    &__show-route,
    &__phone,
    &__mail {
      line-height: $sizeLineHeightMedium;
    }

    &__show-route {
      margin-top: calc((#{$sizeFontBiggerRegular} * #{$sizeLineHeightMedium}) / 2);
    }

    &__phone:not(:first-of-type) {
      margin-top: pxToRem($sizeSmallRegular);
    }

    &__mail {
      margin-bottom: pxToRem($sizeSmallRegular);
    }
  }
  /*
  * Media Queries XLARGE
  */
  @include mq($from: xlarge) {
    &:not(.mdl-contact--location):not(.mdl-contact--fullwidth):not(.mdl-contact--with-map) {
      padding: pxToRem($sizeBiggerBig) 0;
    }

    &--fullwidth {
      padding: pxToRem($sizeGiant) 0;

      .mdl-contact__subtitle {
        margin-bottom: pxToRem($sizeLarge);
      }

      .mdl-contact__cell-icon {
        margin-top: 0;
      }
    }

    &--with-map {
      padding: pxToRem($sizeHuge) 0;
    }

    .atm-heading {
      line-height: $sizeLineHeightNarrower;
      margin-bottom: pxToRem($sizeBiggerBig);
    }

    &__subtitle {
      line-height: $sizeLineHeightNarrow;
      margin-bottom: pxToRem($sizeLarge);

      br {
        display: none;
      }

      a {
        padding-left: pxToRem(18px);
      }
    }

    &__lead {
      margin-top: - pxToRem($sizeLarge);

      a {
        margin-top: pxToRem($sizeTiny);
      }
    }

    &__show-route {
      margin-top: calc((#{$sizeFontMedium} * #{$sizeLineHeightMedium}) / 2);
    }

    &__mail {
      margin-bottom: pxToRem($sizeRegular);
    }

    &__cell-icon {
      width: pxToRem($sizeBiggerBig);
      height: pxToRem($sizeBiggerBig);

      svg {
        transform: translate(-50%, -50%) scale(1);
      }
    }

    &__address,
    &__show-route,
    &__phone,
    &__mail {
      line-height: $sizeLineHeightMedium;
    }

    &__map_container {
      margin-top: pxToRem($sizeHuge);
    }
  }
}

/*
* COLOR-VARIATIONS
*/
@each $key, $val in $tl-color-variations {
  .#{$key} {
    .mdl-contact:not(.mdl-contact--location) {
      background-color: #{$val};

      .mdl-contact__cell-icon {
        svg use {
          fill: #{$val};
        }
      }
    }
  }
}
