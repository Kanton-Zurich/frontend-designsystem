$heightRegular: 72px;
$heightSmall: $sizeSmallHuge;
$heightTextarea: 112px;

$topSpace_with_half_border: 25px;
$topSpace_without_border: 22px;
$rightSpace: 44px;
$unitLeftSpace: 62px;

.mdl-form_input {
  position: relative;

  &__input {
    background: $colorWhite;
    padding: pxToRem($topSpace_with_half_border) pxToRem($rightSpace) pxToRem($topSpace_with_half_border) pxToRem($sizeRegular);

    border: 2px solid $colorBlack40;
    border-radius: 2px;
    width: 100%;
    height: 100%;

    &:disabled {
      border: 2px solid $colorBlack20;
      color: rgba(0, 0, 0, 0.2);
    }

    @at-root {
      textarea#{&} {
        padding-top: pxToRem($sizeLarge);
        padding-bottom: pxToRem($sizeLarge);
        min-width: 100%;
        min-height: pxToRem($heightTextarea);
        height: 100%;
        text-indent: 0;
        resize: vertical;
        overflow: auto;


        & + label {
          top: 2px;
          padding-top: pxToRem(18px);
          width: calc(100% - #{$sizeRegular} - 44px);
          background-color: $colorWhite;

          &:after {
            content: '';
            position: absolute;
            display: block;
            top: 0;
            left: 0;

            z-index: 1;
          }
        }
      }
    }

    // Hide number spinner
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      /* display: none; <- Crashes Chrome on hover */
      -webkit-appearance: none;
      margin: 0; /* <-- Apparently some margin are still there even though it's hidden */
    }

    &[ type='number' ] {
      -moz-appearance: textfield; /* Firefox */
    }

    // Hide IE 11 default clear cross & show hide password
    &::-ms-clear,
    &::-ms-reveal {
      display: none;
    }
  }
  // Hide palceholder
  &__input::placeholder,
  &__unit,
  label {
    color: $colorBlack60;
    font-size: pxToRem($sizeFontRegular);
    line-height: $sizeLineHeightBase;
  }

  &__unit--left,
  label {
    left: pxToRem($sizeRegular + 2px);
  }

  &__unit--right {
    right: 17px;
  }

  &__unit {
    top: pxToRem($topSpace_with_half_border);
  }

  &__unit,
  label,
  &__validate-icon,
  p,
  button {
    position: absolute;
  }

  label {
    top: pxToRem($topSpace_without_border);
    transition: top 200ms, font-size 400ms, color 400ms ease-in-out;
    display: none;
  }

  &__validate-icon {
    top: pxToRem($topSpace_with_half_border);
    right: 13px;
    border-radius: 50%;
    width: pxToRem($topSpace_with_half_border);
    height: pxToRem($topSpace_with_half_border);

    span {
      display: none;
    }
  }

  button {
    @include blankButton;

    right: pxToRem($sizeSmallRegular);
    top: 50%;
    transform: translateY(-50%);
    line-height: 0;

    svg use {
      fill: $colorBlack60;
    }

    &:hover svg use {
      fill: $colorBlack;
    }
  }

  p {
    top: 100%;
    left: 0;
    width: 100%;
    font-size: pxToRem($sizeFontTiny);
    line-height: $sizeLineHeightBase;
    margin: 0;
    padding-left: pxToRem($sizeRegular + 2px);
    color: $colorWhite;
    background-color: $colorRed;
    transform: translateY(-50%) scaleY(0);
    transition: transform 400ms, opacity 400ms, height 400ms ease-in-out;
    height: 0;
    opacity: 0;
  }

  &--floated {
    label {
      display: block;
    }

    .mdl-form_input__input {
      &::placeholder {
        color: transparent;
      }

      &:not(.dirty) {
        @at-root {
          textarea#{&} {
            & ~ label {
              top: 2px;
              padding-top: pxToRem(18px);
            }
          }
        }
      }

      /**
      * PRISTINE
      */
      &.pristine {
        & + label {
          top: pxToRem($sizeLarge);
        }

        @at-root {
          textarea#{&} {
            & + label {
              top: 2px;
              padding-top: pxToRem(18px);
            }
          }
        }
      }

      /**
      * DIRTY / FOCUS
      */
      &.dirty,
      &:focus {
        color: $colorBlack;
        padding-top: pxToRem(35px);
        padding-bottom: pxToRem(15px);

        & ~ label {
          pointer-events: none;
          padding: 0;
          top: pxToRem($sizeFontSmall);
          font-weight: $fontWeightBlack;
          font-size: pxToRem($sizeFontTiny);
          line-height: $sizeLineHeightBase;
          color: $colorBlack;
        }
        // for some reason the @at-root selector stuff dont work here so the modifier class above
      }

      &--txtarea {
        &.dirty,
        &:focus {
          & ~ label {
            top: 2px;
            padding-top: pxToRem(18px);
          }
        }
      }

      /**
      * VALID
      */
      &.valid {
        & ~ .mdl-form_input__validate-icon {
          span:first-of-type {
            display: block;

            svg {
              fill: $colorGreen;
            }
          }
        }
      }

      /**
      * INVALID
      */
      &.invalid {
        border-color: $colorRed;

        & ~ .mdl-form_input__validate-icon {
          span:last-of-type {
            display: block;

            svg {
              fill: $colorRed;
            }
          }
        }

        & ~ p {
          padding-top: pxToRem(7px);
          padding-bottom: pxToRem(5px);
          height: auto;
          opacity: 1;
          transform: translateY(0) scaleY(1);
        }
      }
    }
  }

  &--unitLeft {
    input {
      padding-left: pxToRem($unitLeftSpace);
      padding-right: pxToRem($sizeRegular);
    }
  }

  &--unitRight {
    input {
      padding-right: pxToRem($unitLeftSpace);
      padding-left: pxToRem($sizeRegular);
    }
  }

  // Special styles
  &--small {
    height: pxToRem($heightSmall);

    input {
      padding: 0 pxToRem($unitLeftSpace) 0 pxToRem($sizeRegular);
    }
  }
}
