.mdl-richtext {
  max-width: $sizeWidthTextContent;

  // Indentation curves
  $indentCurve: (
    list: (
      tiny: 16px,
      small: 24px,
      xlarge: 32px,
    ),
    benefits: (
      tiny: 32px,
      medium: 40px
    ),
    quote: (
      tiny: 18px,
      xsmall: 22px,
      small: 24px
    )
  );

  // benefit and number list spacings
  $listSpacings: (
    top: (
      tiny: 0,
      large: 4px,
    ),
    bottom: (
      tiny: 12px,
      xlarge: 16px
    ),
  );


  ::selection {
    color: $colorWhite;
    background: $colorBlack;
  }

  h1 {
    @include mq($from: xsmall, $to: small) {
      @include gridNestedOffset('margin-left', 1);
    }
  }

  p {
    margin-top: 0;
    line-height: 1.5em;

    a {
      color: inherit;
      opacity: 0.6;
      text-decoration: none;
      border-bottom: 1px solid $colorBlue;

      &:hover {
        color: $colorBlack;
        opacity: 1;
        border-color: $colorBlack;
      }

      &:focus {
        border-radius: 3px;
        border: 2px solid $colorCyan !important; // stylelint-disable-line
        opacity: 1;
        outline: 0;
        padding: 5px 2px;
        position: relative;
        margin-left: -4px;
        margin-right: -4px;
      }
    }

    @include polyFluidSizing('font-size', map-get($fontSizeCurves, regular));
    @include sizeCurve('margin-bottom', regular);

    &.mdl-richtext__lead {
      font-weight: $fontWeightBlack;
      line-height: 1.3em;

      @include polyFluidSizing('font-size', map-get($fontSizeCurves, biggerRegular));
      @include mq($from: xsmall, $to: small) {
        @include gridNestedOffset('margin-left', 1);
      }
    }
  }

  &__quote,
  &__emphasis {
    @include sizeCurve('margin-bottom', medium);
    @include mq($from: tiny, $to: small) {
      @include sizeCurve('margin-left', quote, $indentCurve);
    }
    @include mq($from: small) {
      @include gridNestedOffset('margin-left', 1);
    }

    padding-top: $sizeSmallRegular;

    p {
      font-weight: $fontWeightQuote;
      line-height: 1.3em;
      color: $colorBlack;
      margin-bottom: 0;

      @include polyFluidSizing('font-size', map-get($fontSizeCurves, biggerRegular));
    }
  }

  &__quote {
    p {
      @include sizeCurve('margin-bottom', mini);
    }

    span {
      @include polyFluidSizing('font-size', map-get($fontSizeCurves, tiny));
    }
  }

  ul {
    margin: 0;
    list-style: none;

    @include sizeCurve('padding-left', list, $indentCurve);
    @include sizeCurve('margin-bottom', regular);

    li {
      @include polyFluidSizing('font-size', map-get($fontSizeCurves, regular));

      margin-bottom: 1em;

      &:before {
        position: absolute;
        content: '\2013';

        @include sizeCurve('margin-left', list, $indentCurve, $isNegative: true);
      }

      ul li:first-child {
        padding-top: 1em;
      }
    }

    &.mdl-richtext__benefits {
      @include sizeCurve('margin-bottom', small);
      @include sizeCurve('padding-left', benefits, $indentCurve);

      li {
        @include sizeCurve('padding-top', top, $listSpacings);
        @include sizeCurve('margin-bottom', bottom, $listSpacings);

        &:before {
          content: '\2003\2003';
          background-image: url(svg-tickmark($colorBlack));// stylelint-disable-line
          background-repeat: no-repeat;
          background-position-x: center;
          background-position-y: center;
          display: block;
          margin-top: -2px;
          padding-left: 10px;

          @include sizeCurve('margin-left', benefits, $indentCurve, $isNegative: true);
          @include sizeCurve('width', regular);
          @include sizeCurve('height', regular);
          @include mq($from: tiny, $to: medium) {
            margin-top: 2px;
          }
        }
      }
    }
  }

  ol {
    margin: 0;
    padding-left: $sizeBig;
    list-style: none;
    counter-reset: ol-counter;

    @include sizeCurve('margin-bottom', small);
    @include sizeCurve('padding-left', benefits, $indentCurve);
    @include mq($from: tiny, $to: medium) {
      padding-top: 0;
    }

    li {
      counter-increment: ol-counter;

      @include polyFluidSizing('font-size', map-get($fontSizeCurves, regular));
      @include sizeCurve('padding-top', top, $listSpacings);
      @include sizeCurve('margin-bottom', bottom, $listSpacings);

      &:before {
        position: absolute;
        content: '0' counter(ol-counter);
        font-weight: $fontWeightBlack;
        color: $colorBlack;

        @include sizeCurve('margin-left', benefits, $indentCurve, true);
      }
    }
  }

  /* Inverted */
  &--inverted {
    ::selection {
      color: $colorBlack;
      background: $colorWhite;
    }

    p,
    li {
      color: $colorWhite;

      a {
        color: $colorWhite;
        text-decoration: none;
        border-bottom: 1px solid $colorWhite;
        opacity: 0.5;

        &:hover {
          color: $colorWhite;
          border-color: $colorWhite;
          opacity: 1;
        }
      }
    }

    ul {
      &.mdl-richtext__benefits li:before {
        background-image: url(svg-tickmark($colorWhite)); // stylelint-disable-line
      }
    }

    ol li:before {
      color: $colorWhite;
    }

    .mdl-richtext__quote span {
      color: $colorWhite;
    }
  }

  @each $key, $val in $tl-color-variations {
    &--#{$key},
    [ class*='#{$key}' ] & {
      ::selection {
        background: #{$val};
      }

      p {
        a {
          border-color: #{$val};

          &:hover {
            border-color: $colorBlack;
          }
        }
      }

      ul {
        &.mdl-richtext__benefits {
          li:before {
            background-image: url(svg-tickmark($val)); // stylelint-disable-line
          }
        }
      }

      ol li:before {
        color: #{$val};
      }

      .mdl-richtext__quote,
      .mdl-richtext__emphasis {
        p {
          color: #{$val};
        }
      }
    }
  }
}
