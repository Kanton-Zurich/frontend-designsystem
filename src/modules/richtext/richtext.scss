.mdl-richtext {
  max-width: $sizeWidthTextContent;

  // benefit and number list spacings
  $listSpacings: (
    top: (
      tiny: 0,
      medium: 4px,
      xlarge: 8px
    ),
    bottom: (
      tiny: 12px,
      xlarge: 16px
    ),
    containerBottom: (
      tiny: 8px,
      medium: 12px,
      xlarge: 16px
    )
  );

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  li {
    hyphens: auto;
  }

  h1 {
    @include mq($from: tiny, $to: small) {
      @include gridNestedOffset('margin-left', 1, $gridOffsetColumns);
    }
    @include mq($from: small, $to: xlarge) {
      margin-left: 0;
    }
  }

  p {
    &.atm-lead {
      color: $colorBlack;

      @include mq($from: xsmall, $to: small) {
        @include gridNestedOffset('margin-left', 1, $gridOffsetColumns);
      }
      @include mq($from: tiny, $to: xsmall) {
        margin-left: 0;
      }
      @include mq($from: small) {
        margin-left: 0;
      }
    }
  }

  &__emphasis {
    @include sizeCurve('margin-bottom', medium);
    @include mq($from: tiny, $to: small) {
      @include sizeCurve('margin-left', quote, $indentCurve);
    }
    @include mq($from: small) {
      @include gridNestedOffset('margin-left', 1, $gridOffsetColumns);
    }

    padding-top: $sizeSmallRegular;

    p {
      line-height: 1.3em;
      color: $colorBlack;
      margin-bottom: 0;

      @include polyFluidSizing('font-size', map-get($fontSizeCurves, biggerRegular));
    }

    em {
      font-style: normal;
      font-family: $fontFamilyBlack;
    }
  }

  ul {
    margin: 0;
    list-style: none;
    color: rgba(0, 0, 0, 0.6);

    @include sizeCurve('padding-left', list, $indentCurve);
    @include sizeCurve('margin-bottom', regular);

    li {
      @include polyFluidSizing('font-size', map-get($fontSizeCurves, regular));

      margin-bottom: 1em;
      position: relative;

      &:before {
        position: absolute;
        content: '\2013';

        @include sizeCurve('margin-left', list, $indentCurve, $isNegative: true);
      }

      ul li:first-child {
        padding-top: 1em;
      }
    }

    &.mdl-richtext__benefits {
      @include sizeCurve('margin-bottom', containerBottom, $listSpacings);
      @include sizeCurve('padding-left', benefits, $indentCurve);

      li {
        margin-bottom: 0;

        @include sizeCurve('padding-top', top, $listSpacings);
        @include sizeCurve('padding-bottom', bottom, $listSpacings);

        &:before {
          content: '\2003\2003';
          background-image: url(svg-tickmark($colorBlack)); // stylelint-disable-line
          background-repeat: no-repeat;
          background-position-x: center;
          background-position-y: center;
          display: block;
          padding-left: 10px;

          @include sizeCurve('margin-left', benefits, $indentCurve, $isNegative: true);
          @include sizeCurve('width', regular);
          @include sizeCurve('height', regular);
          @include mq($from: tiny, $to: medium) {
            margin-top: 2px;
          }
          @include mq($from: xlarge) {
            margin-top: -2px;
          }
        }
      }
    }
  }

  ol {
    margin: 0;
    padding-left: $sizeBig;
    list-style: none;
    counter-reset: ol-counter;
    color: rgba(0, 0, 0, 0.6);

    @include sizeCurve('margin-bottom', containerBottom, $listSpacings);
    @include sizeCurve('padding-left', benefits, $indentCurve);
    @include mq($from: tiny, $to: medium) {
      padding-top: 0;
    }

    li {
      counter-increment: ol-counter;
      position: relative;
      margin-bottom: 0;

      @include polyFluidSizing('font-size', map-get($fontSizeCurves, regular));
      @include sizeCurve('padding-top', top, $listSpacings);
      @include sizeCurve('padding-bottom', bottom, $listSpacings);

      &:before {
        position: absolute;
        content: counter(ol-counter, decimal-leading-zero);
        font-weight: $fontFamilyBlack;
        color: $colorBlack;

        @include sizeCurve('margin-left', benefits, $indentCurve, true);
      }
    }
  }

  /* Inverted */
  &--cv-inverted {
    ::selection {
      color: $colorBlack;
      background: $colorWhite;
    }

    p.atm-lead {
      color: $colorWhite;
    }

    p,
    li {
      color: $colorWhite;

      a {
        color: rgba($colorWhite, 0.6);
        text-decoration: none;
        border-bottom: 1px solid rgba($colorWhite, 0.6);

        &:hover {
          color: $colorWhite;
          border-color: $colorWhite;
          opacity: 1;
        }
      }
    }

    ul {
      &.mdl-richtext__benefits li:before {
        background-image: url(svg-tickmark($colorWhite)); // stylelint-disable-line
      }
    }

    ol li:before {
      color: $colorWhite;
    }

    .mdl-quote {
      p,
      span {
        color: $colorWhite;
      }
    }
  }
}

@each $key, $val in $tl-color-variations {
  .#{$key} {
    .mdl-richtext {
      ul {
        &.mdl-richtext__benefits {
          li:before {
            background-image: url(svg-tickmark($val)); // stylelint-disable-line
          }
        }
      }

      ol li:before {
        color: #{$val};
      }

      .mdl-richtext__emphasis {
        p {
          color: #{$val};
        }
      }
    }

    .mdl-quote {
      p {
        color: #{$val};
      }
    }
  }
}
