pipeline {
  agent any
  tools {nodejs "node"}
  environment {
    SLACK_CREDENTIALS = 'slack_auth_token_zhch'
    SLACK_TEAM_DOMAIN = 'zhch'
    SLACK_CHANNEL = '#frontend'
  }
  stages {
    stage('build') {
      steps {
        bitbucketStatusNotify(buildState: 'INPROGRESS')
        sh 'node -v && npm -v'
        sh 'npm install'
        script {
          env.BUILD_LOG_FULL = sh (
              script: "npm run build",
              returnStdout: true
          )
        }
        sh "echo '${env.BUILD_LOG_FULL}' > log.txt"
        sh 'pwd'
      }
    }
    stage('deploy') {
      steps {
        script {
          def pullreq = "${BITBUCKET_PULL_REQUEST_ID}"
          def stringLen = 5
          def strLen = pullreq.toString().size()
          expectedLen = stringLen.toInteger() - strLen.toInteger()
          for(i = 0; i<=expectedLen-1;i++)
          {
            pullreq = "0" + pullreq
          }
          def branch = "${BITBUCKET_SOURCE_BRANCH}"
          branch = branch.replaceAll("origin/", "")
          branch = branch.replaceAll("/", "__")
          branch = java.net.URLEncoder.encode(branch, "UTF-8")
          env.BRANCH_NAME = branch
          env.PR_NR = pullreq
          env.PROJECT_NAME = "czhdev"
        }
        withCredentials([usernamePassword(credentialsId: 'sshuserLsgFE', passwordVariable: 'passWord', usernameVariable: 'userName')]) {
          sh 'sshpass -p $passWord ssh -o StrictHostKeyChecking=no -p 9022 $userName@10.100.128.12 "mkdir -p /usr/local/apache2/htdocs/${PROJECT_NAME}/pullrequests/${PR_NR}_${BRANCH_NAME} &&  rm -rf /usr/local/apache2/htdocs/${PROJECT_NAME}/pullrequests/${PR_NR}_${BRANCH_NAME}/"'
        }
        withCredentials([usernamePassword(credentialsId: 'sshuserLsgFE', passwordVariable: 'passWord', usernameVariable: 'userName')]) {
          sh 'sshpass -p $passWord scp -o StrictHostKeyChecking=no -P 9022 -r dist/ci/dev/ $userName@10.100.128.12:/usr/local/apache2/htdocs/${PROJECT_NAME}/pullrequests/${PR_NR}_${BRANCH_NAME}/'
        }
      }
    }
  }
  post {
    success {
      bitbucketStatusNotify(buildState: 'SUCCESSFUL')
      script {
        def slackResponse = slackSend(
          tokenCredentialId: "${env.SLACK_CREDENTIALS}",
          teamDomain: "${env.SLACK_TEAM_DOMAIN}",
          channel: "${env.SLACK_CHANNEL}",
          botUser: true,
          color: 'good',
          message: "${env.JOB_NAME} build succeeded: ${env.BUILD_URL} Pull Request: ${env.BITBUCKET_PULL_REQUEST_LINK}"
        )
        slackUploadFile(
          credentialId: "${env.SLACK_CREDENTIALS}",
          channel: slackResponse.threadId,
          filePath: 'log.txt',
          initialComment: 'Build log'
        )
      }
    }
    failure {
      bitbucketStatusNotify(buildState: 'FAILED')
      script {
        def slackResponse = slackSend(
          tokenCredentialId: "${env.SLACK_CREDENTIALS}",
          teamDomain: "${env.SLACK_TEAM_DOMAIN}",
          channel: "${env.SLACK_CHANNEL}",
          botUser: true,
          color: 'danger',
          message: "${env.JOB_NAME} build failed: ${env.BUILD_URL} Pull Request: ${env.BITBUCKET_PULL_REQUEST_LINK}"
        )
        slackUploadFile(
          credentialId: "${env.SLACK_CREDENTIALS}",
          channel: slackResponse.threadId,
          filePath: 'log.txt',
          initialComment: 'Build log'
        )
      }
    }
  }
}
