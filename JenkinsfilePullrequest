pipeline {
  agent any
  tools {nodejs "node"}
  node {
    def slackCredentialsId = 'slack_auth_token_zhch'
    def slackTeamDomain = 'zhch'
    def slackChannel = '#frontend'
  }
  stages {
    stage('build') {
      steps {
        bitbucketStatusNotify(buildState: 'INPROGRESS')
        sh 'node -v && npm -v'
        sh 'npm install'
        sh 'npm run build'
        sh 'pwd'
      }
    }
    stage('deploy') {
      steps {
        script {
          def pullreq = "${BITBUCKET_PULL_REQUEST_ID}"
          def stringLen = 5
          def strLen = pullreq.toString().size()
          expectedLen = stringLen.toInteger() - strLen.toInteger()
          for(i = 0; i<=expectedLen-1;i++)
          {
            pullreq = "0" + pullreq
          }
          def branch = "${BITBUCKET_SOURCE_BRANCH}"
          branch = branch.replaceAll("origin/", "")
          branch = branch.replaceAll("/", "__")
          branch = java.net.URLEncoder.encode(branch, "UTF-8")
          env.BRANCH_NAME = branch
          env.PR_NR = pullreq
          env.PROJECT_NAME = "czhdev"
        }
        withCredentials([usernamePassword(credentialsId: 'sshuserLsgFE', passwordVariable: 'passWord', usernameVariable: 'userName')]) {
          sh 'sshpass -p $passWord ssh -o StrictHostKeyChecking=no -p 9022 $userName@10.100.128.12 "mkdir -p /usr/local/apache2/htdocs/${PROJECT_NAME}/pullrequests/${PR_NR}_${BRANCH_NAME} &&  rm -rf /usr/local/apache2/htdocs/${PROJECT_NAME}/pullrequests/${PR_NR}_${BRANCH_NAME}/"'
        }
        withCredentials([usernamePassword(credentialsId: 'sshuserLsgFE', passwordVariable: 'passWord', usernameVariable: 'userName')]) {
          sh 'sshpass -p $passWord scp -o StrictHostKeyChecking=no -P 9022 -r dist/ci/dev/ $userName@10.100.128.12:/usr/local/apache2/htdocs/${PROJECT_NAME}/pullrequests/${PR_NR}_${BRANCH_NAME}/'
        }
      }
    }
  }
  post {
    success {
      bitbucketStatusNotify(buildState: 'SUCCESSFUL')
      def attachments = [
        [
          text: currentBuild.rawBuild.log,
          fallback: 'Logfile',
          color: '#00FF00'
        ]
      ]
      slackSend(
        tokenCredentialId: slackCredentialsId,
        botUser: true,
        teamDomain: slackTeamDomain,
        channel: slackChannel,
        color: 'good',
        attachments: attachments,
        message: "${env.JOB_NAME} build succeeded: ${env.BUILD_URL} Pull Request: ${env.BITBUCKET_PULL_REQUEST_LINK}"
      )
    }
    failure {
      bitbucketStatusNotify(buildState: 'FAILED')
      def attachments = [
        [
          text: currentBuild.rawBuild.log,
          fallback: 'Logfile',
          color: '#ff0000'
        ]
      ]
      slackSend(
        tokenCredentialId: slackCredentialsId,
        botUser: true,
        teamDomain: slackTeamDomain,
        channel: slackChannel,
        color: 'danger',
        attachments: attachments,
        message: "${env.JOB_NAME} build failed: ${env.BUILD_URL} Pull Request: ${env.BITBUCKET_PULL_REQUEST_LINK}"
      )
    }
  }
}
